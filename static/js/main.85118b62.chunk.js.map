{"version":3,"sources":["Components/AddSemesterModal.tsx","Components/TabTitle.tsx","Components/Tab.tsx","Components/EditorForms.tsx","Components/EditorControlPanel.tsx","Components/SemesterTable.tsx","Components/PopUpInstructions.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddSemesterModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Form","Group","className","controlId","Label","Control","type","placeholder","Text","Footer","TabTitle","title","setSelectedTab","index","selectedTab","useCallback","Tabs","children","map","item","props","TitleForm","newTitle","setTitle","id","as","rows","value","onChange","ev","target","DescriptionForm","newDescription","setDescription","OpenEditing","course","editing","setEditing","ToggleButton","code","checked","CloseEditing","currentSemester","setCurrentSemester","description","credits","courses","oldCourse","SemesterTable","PopUp","content","App","defaultSemesters","COURSES","semesterList","setSemesterList","isOpen","setIsOpen","Tab","href","DropdownButton","semi","Dropdown","Item","CloseButton","newSemesterList","filter","sem","removeSemester","Array","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85118b62.chunk.js","sourcesContent":["//import { render } from \"@testing-library/react\";\nimport React, { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\n\n\nexport function AddSemesterModal(): JSX.Element {\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button variant=\"outline-dark\" onClick={handleShow}>Add</Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>More school ugh</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                            <Form.Label>Semester</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Name of Semester\" />\n                            <Form.Text className=\"text-muted\">\n                                Please add a semester here...\n                            </Form.Text>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\n//render(<AddSemesterModal />);","import React, { useCallback } from \"react\";\nimport \"../css/Tabs.css\";\n\n\ntype Props = {\n  title: string\n  index: number\n  setSelectedTab: (index: number) => void\n  selectedTab: number\n}\n\nconst TabTitle: React.FC<Props> = ({ title, setSelectedTab, index, selectedTab }) => {\n\n    const onClick = useCallback(() => {\n        setSelectedTab(index);\n    }, [setSelectedTab, index]);\n\n    return (\n        <div className = \"TabsCSS\">\n            <li className={`li ${selectedTab === index ? \"active\" : \"\"}`}>\n                <button onClick={onClick}>{title}</button>\n            </li>\n        </div>\n    );\n};\nexport default TabTitle;\n\n","import React, {ReactElement, useState} from \"react\";\nimport TabTitle from \"./TabTitle\";\nimport \"../css/Tabs.css\";\n\n\ntype Props = {\n  children: ReactElement[]\n}\n\nconst Tabs: React.FC<Props> = ({ children }) => {\n    const [selectedTab, setSelectedTab ] = useState(0);\n\n    return (\n        <div className=\"TabsCSS\">\n            <ul className=\"ul\">\n                {children.map((item, index) => \n                    <TabTitle\n                        key={index}\n                        title={item.props.title}\n                        index={index}\n                        setSelectedTab={setSelectedTab}\n                        selectedTab={selectedTab}\n                    />\n                )}\n            </ul>\n            {children[selectedTab]}\n        </div>\n    );\n};\n\nexport default Tabs;","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport function TitleForm({newTitle, setTitle}: {newTitle:string, setTitle:(newTitle:string)=>void}): JSX.Element {\n    return (\n        <Form>\n            <Form.Group className='mb-3' id='editCourse.courseTitle'>\n                <Form.Control as=\"textarea\" rows={ 1 } value={ newTitle } onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setTitle(ev.target.value)} />\n            </Form.Group>\n        </Form>\n    );\n}\n\nexport function DescriptionForm({newDescription, setDescription}: {newDescription:string, setDescription:(newDescription:string)=>void}): JSX.Element {\n    return (\n        <Form>\n            <Form.Group className='mb-3' id='editCourse.courseDescription'>\n                <Form.Control as=\"textarea\" rows={ 5 } value={ newDescription } onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDescription(ev.target.value)} />\n            </Form.Group>\n        </Form>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, ToggleButton } from \"react-bootstrap\";\nimport { Course as CourseIF, Semester } from \"./SemesterTable\";\nimport { TitleForm, DescriptionForm } from \"./EditorForms\";\n\nexport function OpenEditing({course, editing, setEditing}: {course: CourseIF, editing:boolean, setEditing: (b:boolean)=>void}): JSX.Element {\n    return (\n        <div>\n            <ToggleButton \n                variant=\"secondary\" \n                id={ `toggle-editing-${ course.code }` }\n                checked={ editing } \n                value=\"1\" \n                onClick={()=>{\n                    setEditing(true);\n                }}\n            >Edit</ToggleButton>\n        </div>);\n}\n\nexport function CloseEditing({course, setEditing, currentSemester, setCurrentSemester}: \n    {course: CourseIF, setEditing: (b:boolean)=>void, currentSemester: Semester, setCurrentSemester: (s:Semester)=>void}): JSX.Element {\n    \n    const [newTitle, setTitle] = useState<string>(course.title);\n    const [newDescription, setDescription] = useState<string>(course.description);\n    \n    // the following function includes guidance from Cameron Thakar (Team 4)\n    function updateSemester(): void {\n        setCurrentSemester({title: currentSemester.title, courses: currentSemester.courses.map((oldCourse: CourseIF): CourseIF => {\n            return course.code === oldCourse.code ? \n                {...oldCourse, title: newTitle, description: newDescription} : oldCourse;\n        })});\n    }\n\n    function resetSemester(): void {\n        setTitle(course.title);\n        setDescription(course.description);\n    }\n\n    return (\n        <div><table className  = \"Table-Header\">\n            <tr><th>Course</th><th>Title</th><th>Credits</th><th>Description</th><th>Panel</th></tr> \n            <tr><td>{ course.code }</td>\n                <td><TitleForm newTitle={ newTitle } setTitle={ setTitle }></TitleForm></td>\n                <td>{ course.credits }</td>\n                <td><DescriptionForm newDescription={ newDescription } setDescription={ setDescription }></DescriptionForm></td>\n                <td>\n                    <Button \n                        variant=\"outline-danger\" \n                        onClick={()=>{\n                            resetSemester();\n                            setEditing(false);\n                        }} \n                    >Cancel</Button>\n                    <Button \n                        variant=\"success\"\n                        onClick={()=>{\n                            updateSemester();\n                            setEditing(false);\n                        }}\n                    >Done</Button>\n                </td></tr></table></div>);\n\n}","import \"../css/Semester.css\";\nimport React, { useState } from \"react\";\nimport { OpenEditing, CloseEditing } from \"./EditorControlPanel\";\n\nexport interface Course {\n    code: string;\n    title: string;\n    credits: number;\n    description: string;\n}\n\nexport interface Semester {\n    courses: Course[];\n    title: string;\n}\n \nexport function SemesterTable({currentSemester, setCurrentSemester}: {currentSemester: Semester, setCurrentSemester: (s:Semester)=>void}): JSX.Element {\n    const [editing, setEditing] = useState<boolean>(false);\n\n    return !editing ? \n        <table className  = \"Table-Header\">\n            <tr><th>Course</th><th>Title</th><th>Credits</th><th>Description</th><th>Panel</th></tr> \n            { currentSemester.courses.map((course: Course) => {\n                return <tr key={course.code}>\n                    <td>{course.code}</td>\n                    <td>{course.title}</td>\n                    <td>{course.credits}</td>\n                    <td>{course.description}</td>\n                    <OpenEditing course={ course } editing={ editing } setEditing={ setEditing }></OpenEditing>\n                </tr>;\n            })}\n        </table>\n        :\n        <div>\n            { currentSemester.courses.map((course: Course) => {\n                return <CloseEditing \n                    key={ course.code }\n                    course={ course } \n                    setEditing={ setEditing } \n                    currentSemester={ currentSemester }\n                    setCurrentSemester={ setCurrentSemester }\n                ></CloseEditing>;\n            })}\n        </div>;\n}\n","import React, { useCallback } from \"react\";\nimport \"../css/PopUp.css\";\n\n\ntype Props = {\n    handleClose: () => void;\n    content: string ;\n}\n\nconst PopUp: React.FC<Props> = ({handleClose, content}) => {\n\n    const onClick = useCallback(()=>{\n        handleClose();\n    },\n    [handleClose]);\n\n    return (\n        <div className = \"PopUpBox\">\n            <div className = \"box\">\n                <span className = \"close\" onClick={onClick}>\n                 x\n                </span>\n                {content}\n            </div>\n        </div>\n    );\n};\n\nexport default PopUp;\n    \n\n","import \"./css/App.css\";\nimport React, { useState } from \"react\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport Tab from \"./Components/Tab\";\nimport COURSES from \"./Assets/Courses.json\";\nimport { Semester, SemesterTable } from \"./Components/SemesterTable\";\nimport PopUp from \"./Components/PopUpInstructions\";\nimport { CloseButton, Dropdown, DropdownButton } from \"react-bootstrap\";\n\nfunction App(): JSX.Element { // jsx.element = very important return type, function has to return jsx.element\n    const defaultSemesters: Semester[] = [{\n        courses: [COURSES[0], COURSES[1], COURSES[2], COURSES[3], COURSES[4]],\n        title: \"Freshman Fall Semester\"\n    },\n    {\n        courses: [COURSES[5], COURSES[6], COURSES[7], COURSES[8], COURSES[9]],\n        title: \"Freshman Spring Semester\"\n    },\n    {\n        courses: [COURSES[10], COURSES[11], COURSES[12], COURSES[13], COURSES[14]],\n        title: \"Sophmore Fall Semester\"\n    },\n    {\n        courses: [COURSES[15], COURSES[16], COURSES[17], COURSES[18], COURSES[19]],\n        title: \"Sophmore Spring Semester\"\n    },\n    {\n        courses: [COURSES[20], COURSES[21], COURSES[22], COURSES[23], COURSES[24]],\n        title: \"Junior Fall Semester\"\n    },\n    {\n        courses: [COURSES[25], COURSES[26], COURSES[27], COURSES[28], COURSES[29]],\n        title: \"Junior Spring Semester\"\n    },\n    {\n        courses: [COURSES[30], COURSES[31], COURSES[32], COURSES[33], COURSES[34]],\n        title: \"Senior Fall Semester\"\n    },\n    {\n        courses: [COURSES[35], COURSES[36], COURSES[37], COURSES[38], COURSES[39]],\n        title: \"Senior Spring Semester\"\n    },\n    ];\n\n    const [semesterList, setSemesterList] = useState(defaultSemesters);\n    const [currentSemester, setCurrentSemester] = useState<Semester>(semesterList[0]);\n    const [isOpen, setIsOpen] = useState(false);\n    const togglePopUp = () => {\n        setIsOpen(!isOpen);\n    };\n\n    function removeSemester() {\n        const newSemesterList = semesterList.filter(sem => sem !== currentSemester);\n        setSemesterList(newSemesterList);\n        setCurrentSemester(newSemesterList[0]);\n    }\n    /*\n    function addSemester() {\n        const newSemesterList = semesterList.filter(sem => sem);\n        setSemesterList(newSemesterList);\n        setCurrentSemester(newSemesterList[0]);\n    }\n    */\n    \n    function clearSemester() {\n        setSemesterList(new Array<Semester>());\n    }\n\n\n    return (\n        <div>\n            <input type=\"button\"\n                value=\"Click to View Instructions\"\n                onClick={togglePopUp} />\n            <p> Step by Step Instructions To Navigate Our Site </p>\n            {isOpen && <PopUp content={\"<li>Click Course Selector</li>\"} handleClose={() => setIsOpen(false)} />}         \n            <Tab>\n                <span title=\"Welcome And Navigating Our Site\">\n                    <body>\n                        <header>\n                            <p>Welcome to Team 3s UD CIS Scheduler</p>\n                            <p>Authors: Ren Ross, Abel Juarez, and Ahilyn Dipre</p>\n                            <p>Our goal is to help CISC students plan out their semesters,\n                                by providing templates of potential Fall/Spring semesters and even\n                                Winter and Summer.</p>\n                            <p>This site will serve as a way for students\n                                to keep track of the classes they have taken and which ones\n                                they need to take next.\n                            </p>\n                            <p>Students will get the option to remove a Semester if they are not pleased with their schedule</p>\n                            <p>Students will be able to edit in classes in case our default schedules dont match theirs</p>\n                            <p>Recommended 4 Year Path To Graduate on Time: <a href=\"https://www.cis.udel.edu/wp-content/uploads/2018/10/COE_MajorSlicks_CISC_2018.pdf\">Suggested Plan</a></p>\n\n                            <h1>Getting Started</h1>\n                            <ul>\n                                <li>Click Course Selector</li>\n                                <li>Choose designated semester which you want to plan</li>\n                                <li>Click buttons below Semester Schedules to view different semesters</li>\n                                <li>Options to start planning session all over will be available</li>\n                                <li>To be continued</li>\n                            </ul>\n                        </header>\n                    </body>\n                </span>\n                <span title=\"Course Selector\">\n                    <p>The table below is a structured set of data made up of courses that\n                        most Computer Science B.S. majors have to take. This table allows\n                        you to quickly and easily look through all the semesters (Freshman\n                        to Senior). These semesters default to courses that are recommended\n                        by the <a href=\"https://www.cis.udel.edu/wp-content/uploads/2018/10/COE_MajorSlicks_CISC_2018.pdf\">4 Year Path </a>\n                        to graduate on time (by the University of Delaware). However, the\n                        tables can be manipulated in a way that can fit anyone’s academic needs.</p>\n\n                    <DropdownButton id=\"dropdown-basic-button\" title=\"Semesters\">\n                        {semesterList.map(semi => {\n                            return (\n                                <Dropdown.Item onClick={() => setCurrentSemester(semi)} key={semi.title}>{semi.title}</Dropdown.Item>\n                            );\n                        })}\n                    </DropdownButton>\n                    <CloseButton className=\"Close-Button\" onClick={() => removeSemester()}/>\n                    <AddSemesterModal />\n                    <button className=\"Clear-Semester\" onClick={() => clearSemester()}>Clear</button>\n                    <SemesterTable currentSemester={currentSemester} setCurrentSemester={setCurrentSemester}></SemesterTable>\n                </span>\n            </Tab>\n        </div>\n\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}